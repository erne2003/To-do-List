{"ast":null,"code":"var _jsxFileName = \"D:\\\\to-do-list\\\\src\\\\Plans.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Plans.css\";\n\n// Simple Plan class\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Plan {\n  constructor(name, taskList = []) {\n    this.name = name;\n    this.taskList = taskList;\n  }\n}\nconst Plans = () => {\n  _s();\n  // Load + rehydrate from localStorage\n  const [planList, setPlanList] = useState(() => {\n    const raw = localStorage.getItem(\"plans\");\n    if (!raw) return [];\n    try {\n      const arr = JSON.parse(raw);\n      return arr.map(p => new Plan(p.name, p.taskList || []));\n    } catch {\n      return [];\n    }\n  });\n\n  // Persist name+taskList whenever planList changes\n  useEffect(() => {\n    const toSave = planList.map(p => ({\n      name: p.name,\n      taskList: p.taskList\n    }));\n    localStorage.setItem(\"plans\", JSON.stringify(toSave));\n  }, [planList]);\n\n  // Four input slots for adding plans\n  const [inputs, setInputs] = useState([\"\", \"\", \"\", \"\"]);\n  const addPlan = index => {\n    const name = inputs[index].trim();\n    if (!name) return;\n    const newP = new Plan(name);\n    setPlanList(pls => {\n      const copy = [...pls];\n      copy[index] = newP;\n      return copy;\n    });\n    setInputs(inp => {\n      const c = [...inp];\n      c[index] = \"\";\n      return c;\n    });\n  };\n  const clearPlan = index => {\n    setPlanList(pls => {\n      const copy = [...pls];\n      copy.splice(index, 1);\n      return copy;\n    });\n  };\n  const renderSlot = index => {\n    const plan = planList[index];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `Plan-${index + 1}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Plans-Content\",\n        children: [plan ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: plan.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: `Enter plan #${index + 1} name`,\n          value: inputs[index],\n          onChange: e => {\n            const c = [...inputs];\n            c[index] = e.target.value;\n            setInputs(c);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Add-Plan\",\n          onClick: () => plan ? clearPlan(index) : addPlan(index),\n          style: {\n            border: \"none\",\n            cursor: \"pointer\",\n            background: \"none\"\n          },\n          children: plan ? \"Remove Plan\" : \"Add Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Plans\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plan-Title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Plans Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plans-Container\",\n      children: [0, 1, 2, 3].map(renderSlot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Plans, \"v2BtJpX8jocmKgjWZBmPFSoboEg=\");\n_c = Plans;\nexport default Plans;\nvar _c;\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Plan","constructor","name","taskList","Plans","_s","planList","setPlanList","raw","localStorage","getItem","arr","JSON","parse","map","p","toSave","setItem","stringify","inputs","setInputs","addPlan","index","trim","newP","pls","copy","inp","c","clearPlan","splice","renderSlot","plan","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","style","border","cursor","background","_c","$RefreshReg$"],"sources":["D:/to-do-list/src/Plans.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Plans.css\";\r\n\r\n// Simple Plan class\r\nexport class Plan {\r\n  constructor(name, taskList = []) {\r\n    this.name = name;\r\n    this.taskList = taskList;\r\n  }\r\n}\r\n\r\nconst Plans = () => {\r\n  // Load + rehydrate from localStorage\r\n  const [planList, setPlanList] = useState(() => {\r\n    const raw = localStorage.getItem(\"plans\");\r\n    if (!raw) return [];\r\n    try {\r\n      const arr = JSON.parse(raw);\r\n      return arr.map(p => new Plan(p.name, p.taskList || []));\r\n    } catch {\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Persist name+taskList whenever planList changes\r\n  useEffect(() => {\r\n    const toSave = planList.map(p => ({\r\n      name: p.name,\r\n      taskList: p.taskList\r\n    }));\r\n    localStorage.setItem(\"plans\", JSON.stringify(toSave));\r\n  }, [planList]);\r\n\r\n  // Four input slots for adding plans\r\n  const [inputs, setInputs] = useState([\"\", \"\", \"\", \"\"]);\r\n\r\n  const addPlan = index => {\r\n    const name = inputs[index].trim();\r\n    if (!name) return;\r\n    const newP = new Plan(name);\r\n    setPlanList(pls => {\r\n      const copy = [...pls];\r\n      copy[index] = newP;\r\n      return copy;\r\n    });\r\n    setInputs(inp => {\r\n      const c = [...inp];\r\n      c[index] = \"\";\r\n      return c;\r\n    });\r\n  };\r\n\r\n  const clearPlan = index => {\r\n    setPlanList(pls => {\r\n      const copy = [...pls];\r\n      copy.splice(index, 1);\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  const renderSlot = index => {\r\n    const plan = planList[index];\r\n    return (\r\n      <div key={index} className={`Plan-${index + 1}`}>\r\n        <div className=\"Plans-Content\">\r\n          {plan ? (\r\n            <>\r\n              <h3>{plan.name}</h3>\r\n            </>\r\n          ) : (\r\n            <input\r\n              type=\"text\"\r\n              placeholder={`Enter plan #${index + 1} name`}\r\n              value={inputs[index]}\r\n              onChange={e => {\r\n                const c = [...inputs];\r\n                c[index] = e.target.value;\r\n                setInputs(c);\r\n              }}\r\n            />\r\n          )}\r\n          <button\r\n            className=\"Add-Plan\"\r\n            onClick={() => (plan ? clearPlan(index) : addPlan(index))}\r\n            style={{ border: \"none\", cursor: \"pointer\", background: \"none\" }}\r\n          >\r\n            {plan ? \"Remove Plan\" : \"Add Plan\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"Plans\">\r\n      <div className=\"Plan-Title\">\r\n        <h1>Plans Screen</h1>\r\n      </div>\r\n      <div className=\"Plans-Container\">\r\n        {[0, 1, 2, 3].map(renderSlot)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Plans;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}