{"ast":null,"code":"var _jsxFileName = \"D:\\\\to-do-list\\\\src\\\\Plans.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\nimport './Plans.css'; // Importing CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plans = () => {\n  _s();\n  class Plan {\n    constructor(name) {\n      this.name = name;\n      this.tasks = []; // Store tasks for each plan\n    }\n  }\n  const [planList, setPlanList] = useState([]); // Plan list containing plan objects\n  const [planInput, setPlanInput] = useState(\"\");\n  const [selectedPlanIndex, setSelectedPlanIndex] = useState(null); // Track the selected plan\n\n  // Load plans from localStorage on component mount\n  useEffect(() => {\n    const savedPlans = JSON.parse(localStorage.getItem(\"plans\"));\n    if (savedPlans) {\n      setPlanList(savedPlans); // Set the loaded plans to state\n    }\n  }, []);\n\n  // Save plans to localStorage whenever the plan list changes\n  useEffect(() => {\n    if (planList.length > 0) {\n      localStorage.setItem(\"plans\", JSON.stringify(planList));\n    }\n  }, [planList]);\n\n  // Handle adding a new plan\n  const addPlan = () => {\n    if (planInput.trim() !== \"\") {\n      const newPlan = new Plan(planInput); // Create a new plan\n      setPlanList([...planList, newPlan]); // Add new plan to the plan list\n      setPlanInput(\"\"); // Clear input after adding\n    }\n  };\n\n  // Handle adding a task to the selected plan\n  const addTaskToPlan = task => {\n    if (task.trim() !== \"\" && selectedPlanIndex !== null) {\n      const updatedPlans = [...planList];\n      updatedPlans[selectedPlanIndex].tasks.push(task); // Add task to the selected plan\n      setPlanList(updatedPlans); // Update the plan list\n    }\n  };\n\n  // Handle plan selection\n  const selectPlan = index => {\n    setSelectedPlanIndex(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Plans\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plan-Title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Plans Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plan-Navigation\",\n      children: planList.map((plan, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectPlan(index),\n        style: {\n          backgroundColor: \"white\",\n          border: \"1px solid black\"\n        },\n        children: plan.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Add-Plan\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Plan Name\",\n        value: planInput,\n        onChange: e => setPlanInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addPlan,\n        style: {\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: planInput ? /*#__PURE__*/_jsxDEV(FaMinusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(FaPlusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), selectedPlanIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Task-Input\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Tasks for \", planList[selectedPlanIndex].name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter task\",\n        onKeyDown: e => {\n          if (e.key === \"Enter\") {\n            addTaskToPlan(e.target.value);\n            e.target.value = \"\"; // Clear input field after adding task\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: planList[selectedPlanIndex].tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: task\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Plans, \"aFycQ9WeBELb/09IyGSzJoJmbF4=\");\n_c = Plans;\nexport default Plans;\nvar _c;\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"names":["React","useState","useEffect","FaPlusCircle","FaMinusCircle","jsxDEV","_jsxDEV","Plans","_s","Plan","constructor","name","tasks","planList","setPlanList","planInput","setPlanInput","selectedPlanIndex","setSelectedPlanIndex","savedPlans","JSON","parse","localStorage","getItem","length","setItem","stringify","addPlan","trim","newPlan","addTaskToPlan","task","updatedPlans","push","selectPlan","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","plan","onClick","style","backgroundColor","border","type","placeholder","value","onChange","e","target","cursor","onKeyDown","key","_c","$RefreshReg$"],"sources":["D:/to-do-list/src/Plans.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\r\nimport './Plans.css'; // Importing CSS for styling\r\n\r\nconst Plans = () => {\r\n  class Plan {\r\n    constructor(name) {\r\n      this.name = name;\r\n      this.tasks = []; // Store tasks for each plan\r\n    }\r\n  }\r\n\r\n  const [planList, setPlanList] = useState([]); // Plan list containing plan objects\r\n  const [planInput, setPlanInput] = useState(\"\");\r\n  const [selectedPlanIndex, setSelectedPlanIndex] = useState(null); // Track the selected plan\r\n\r\n  // Load plans from localStorage on component mount\r\n  useEffect(() => {\r\n    const savedPlans = JSON.parse(localStorage.getItem(\"plans\"));\r\n    if (savedPlans) {\r\n      setPlanList(savedPlans); // Set the loaded plans to state\r\n    }\r\n  }, []);\r\n\r\n  // Save plans to localStorage whenever the plan list changes\r\n  useEffect(() => {\r\n    if (planList.length > 0) {\r\n      localStorage.setItem(\"plans\", JSON.stringify(planList));\r\n    }\r\n  }, [planList]);\r\n\r\n  // Handle adding a new plan\r\n  const addPlan = () => {\r\n    if (planInput.trim() !== \"\") {\r\n      const newPlan = new Plan(planInput); // Create a new plan\r\n      setPlanList([...planList, newPlan]); // Add new plan to the plan list\r\n      setPlanInput(\"\"); // Clear input after adding\r\n    }\r\n  };\r\n\r\n  // Handle adding a task to the selected plan\r\n  const addTaskToPlan = (task) => {\r\n    if (task.trim() !== \"\" && selectedPlanIndex !== null) {\r\n      const updatedPlans = [...planList];\r\n      updatedPlans[selectedPlanIndex].tasks.push(task); // Add task to the selected plan\r\n      setPlanList(updatedPlans); // Update the plan list\r\n    }\r\n  };\r\n\r\n  // Handle plan selection\r\n  const selectPlan = (index) => {\r\n    setSelectedPlanIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Plans\">\r\n      <div className=\"Plan-Title\">\r\n        <h1>Plans Screen</h1>\r\n      </div>\r\n\r\n      {/* Plan Buttons to switch between plans */}\r\n      <div className=\"Plan-Navigation\">\r\n        {planList.map((plan, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => selectPlan(index)}\r\n            style={{ backgroundColor: \"white\", border: \"1px solid black\" }}\r\n          >\r\n            {plan.name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Plan Input */}\r\n      <div className=\"Add-Plan\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"New Plan Name\"\r\n          value={planInput}\r\n          onChange={(e) => setPlanInput(e.target.value)}\r\n        />\r\n        <button onClick={addPlan} style={{ border: \"none\", cursor: \"pointer\" }}>\r\n          {planInput ? <FaMinusCircle /> : <FaPlusCircle />}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Task Input for the selected plan */}\r\n      {selectedPlanIndex !== null && (\r\n        <div className=\"Task-Input\">\r\n          <h2>Tasks for {planList[selectedPlanIndex].name}</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter task\"\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                addTaskToPlan(e.target.value);\r\n                e.target.value = \"\"; // Clear input field after adding task\r\n              }\r\n            }}\r\n          />\r\n          <ul>\r\n            {planList[selectedPlanIndex].tasks.map((task, index) => (\r\n              <li key={index}>{task}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Plans;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}