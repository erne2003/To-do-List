{"ast":null,"code":"var _jsxFileName = \"D:\\\\to-do-list\\\\src\\\\Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Task.css\"; // Ensure the path is correct\nimport Plans from \"./Plans\"; // Import Plans component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [selectedPlan, setSelectedPlan] = useState(\"\"); // State to track the selected plan\n  const [plans, setPlans] = useState([]);\n\n  // Load saved plans from localStorage once\n  useEffect(() => {\n    const saved = localStorage.getItem(\"plans\");\n    if (saved) setPlans(JSON.parse(saved));\n  }, []);\n\n  // inside your Task component, after your other useEffects:\n  useEffect(() => {\n    // write the latest plans (with updated taskList) to localStorage\n    localStorage.setItem(\"plans\", JSON.stringify(plans));\n  }, [plans]);\n\n  // Whenever the selected plan or the plans array changes,\n  // pull that plan’s taskList into our `tasks` state\n  useEffect(() => {\n    if (!selectedPlan) {\n      setTasks([]);\n      return;\n    }\n    const sp = plans.find(p => p.name === selectedPlan);\n    setTasks((sp === null || sp === void 0 ? void 0 : sp.taskList) || []);\n  }, [selectedPlan, plans]);\n\n  // Handle input field change\n  const getInput = event => {\n    setInputValue(event.target.value);\n  };\n\n  // Add a new task into the selected plan\n  const addTask = () => {\n    if (!inputValue.trim() || !selectedPlan) return;\n    const newTask = {\n      description: inputValue.trim(),\n      completed: false\n    };\n\n    // 1) update the plans array\n    const updatedPlans = plans.map(p => {\n      if (p.name !== selectedPlan) return p;\n      return {\n        ...p,\n        taskList: [...(p.taskList || []), newTask]\n      };\n    });\n    setPlans(updatedPlans);\n\n    // 2) mirror back into tasks (so your render logic continues to work)\n    const sp = updatedPlans.find(p => p.name === selectedPlan);\n    setTasks((sp === null || sp === void 0 ? void 0 : sp.taskList) || []);\n    setInputValue(\"\");\n  };\n\n  // Toggle a task’s completed flag inside the selected plan\n  const toggleTaskCompletion = index => {\n    const updatedPlans = plans.map(p => {\n      if (p.name !== selectedPlan) return p;\n      return {\n        ...p,\n        taskList: p.taskList.map((t, i) => i === index ? {\n          ...t,\n          completed: !t.completed\n        } : t)\n      };\n    });\n    setPlans(updatedPlans);\n    const sp = updatedPlans.find(p => p.name === selectedPlan);\n    setTasks((sp === null || sp === void 0 ? void 0 : sp.taskList) || []);\n  };\n\n  // Render task list\n  const getTasks = () => tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"List-Container\",\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Space-between-tasks\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.completed,\n          onChange: () => toggleTaskCompletion(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"Task-text\",\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Task\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Plan-Navigation\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          display: \"flex\",\n          listStyle: \"none\",\n          padding: 0\n        },\n        children: plans.map((plan, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            marginRight: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"Navigation-Plans\",\n            onClick: () => setSelectedPlan(plan.name),\n            style: {\n              backgroundColor: plan.name === selectedPlan ? \"#eee\" : \"white\"\n            },\n            children: plan.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: getInput,\n        placeholder: \"Enter a task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"Task-Function\",\n        onClick: addTask,\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TaskList\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: getTasks()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Task, \"J73sosdECixMmCgFWSvcPVDkifY=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","useEffect","Plans","jsxDEV","_jsxDEV","Task","_s","tasks","setTasks","inputValue","setInputValue","selectedPlan","setSelectedPlan","plans","setPlans","saved","localStorage","getItem","JSON","parse","setItem","stringify","sp","find","p","name","taskList","getInput","event","target","value","addTask","trim","newTask","description","completed","updatedPlans","map","toggleTaskCompletion","index","t","i","getTasks","task","className","children","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","id","style","display","listStyle","padding","plan","marginRight","onClick","backgroundColor","placeholder","_c","$RefreshReg$"],"sources":["D:/to-do-list/src/Task.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Task.css\"; // Ensure the path is correct\r\nimport Plans from \"./Plans\"; // Import Plans component\r\n\r\nconst Task = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [selectedPlan, setSelectedPlan] = useState(\"\"); // State to track the selected plan\r\n  const [plans, setPlans] = useState([]);\r\n\r\n  // Load saved plans from localStorage once\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"plans\");\r\n    if (saved) setPlans(JSON.parse(saved));\r\n  }, []);\r\n  \r\n  // inside your Task component, after your other useEffects:\r\nuseEffect(() => {\r\n  // write the latest plans (with updated taskList) to localStorage\r\n  localStorage.setItem(\"plans\", JSON.stringify(plans));\r\n}, [plans]);\r\n\r\n\r\n  // Whenever the selected plan or the plans array changes,\r\n  // pull that plan’s taskList into our `tasks` state\r\n  useEffect(() => {\r\n    if (!selectedPlan) {\r\n      setTasks([]);\r\n      return;\r\n    }\r\n    const sp = plans.find(p => p.name === selectedPlan);\r\n    setTasks(sp?.taskList || []);\r\n  }, [selectedPlan, plans]);\r\n\r\n  // Handle input field change\r\n  const getInput = event => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  // Add a new task into the selected plan\r\n  const addTask = () => {\r\n    if (!inputValue.trim() || !selectedPlan) return;\r\n\r\n    const newTask = { description: inputValue.trim(), completed: false };\r\n\r\n    // 1) update the plans array\r\n    const updatedPlans = plans.map(p => {\r\n      if (p.name !== selectedPlan) return p;\r\n      return {\r\n        ...p,\r\n        taskList: [...(p.taskList || []), newTask]\r\n      };\r\n    });\r\n    setPlans(updatedPlans);\r\n\r\n    // 2) mirror back into tasks (so your render logic continues to work)\r\n    const sp = updatedPlans.find(p => p.name === selectedPlan);\r\n    setTasks(sp?.taskList || []);\r\n\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  // Toggle a task’s completed flag inside the selected plan\r\n  const toggleTaskCompletion = index => {\r\n    const updatedPlans = plans.map(p => {\r\n      if (p.name !== selectedPlan) return p;\r\n      return {\r\n        ...p,\r\n        taskList: p.taskList.map((t, i) =>\r\n          i === index ? { ...t, completed: !t.completed } : t\r\n        )\r\n      };\r\n    });\r\n    setPlans(updatedPlans);\r\n\r\n    const sp = updatedPlans.find(p => p.name === selectedPlan);\r\n    setTasks(sp?.taskList || []);\r\n  };\r\n\r\n  // Render task list\r\n  const getTasks = () =>\r\n    tasks.map((task, index) => (\r\n      <div className=\"List-Container\" key={index}>\r\n        <li>\r\n          <div className=\"Space-between-tasks\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={task.completed}\r\n              onChange={() => toggleTaskCompletion(index)}\r\n            />\r\n            <span id=\"Task-text\">{task.description}</span>\r\n          </div>\r\n        </li>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"Task\">\r\n      <h1 className=\"title\">To-Do List</h1>\r\n\r\n      {/* Plan selector */}\r\n      <div className=\"Plan-Navigation\">\r\n        <ul style={{ display: \"flex\", listStyle: \"none\", padding: 0 }}>\r\n          {plans.map((plan, index) => (\r\n            <li key={index} style={{ marginRight: 8 }}>\r\n              <button\r\n                className=\"Navigation-Plans\"\r\n                onClick={() => setSelectedPlan(plan.name)}\r\n                style={{\r\n                  backgroundColor:\r\n                    plan.name === selectedPlan ? \"#eee\" : \"white\"\r\n                }}\r\n              >\r\n                {plan.name}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* New task input */}\r\n      <div className=\"Navigation\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={getInput}\r\n          placeholder=\"Enter a task\"\r\n        />\r\n        <button id=\"Task-Function\" onClick={addTask}>\r\n          Add Task\r\n        </button>\r\n      </div>\r\n\r\n      {/* Task list for the current plan */}\r\n      <div className=\"container\">\r\n        <div className=\"TaskList\">\r\n          <ul>{getTasks()}</ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}